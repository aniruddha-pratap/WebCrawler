{"version":3,"sources":["../../server/routes/crawl.js"],"names":["event","EventEmitter","queue","async","task","callback","visitedUrls","skippedUrls","errorUrls","pagesObj","on","processedUrl","linkedUrls","add","forEach","link","has","push","processUrl","err","console","log","url","crawl","pages","Set","address","page","find","emit","links"],"mappings":";;;;;;AAAA;;AACA;;;;;;AAEA,IAAIA,QAAQ,IAAIC,oBAAJ,EAAZ;;AAEA;;;AAGA,IAAIC,QAAQC,gBAAMD,KAAN,CAAY,UAACE,IAAD,EAAOC,QAAP,EAAoB;AACxCA;AACH,CAFW,EAET,CAFS,CAAZ;;AAIA,IAAIC,oBAAJ;AACA,IAAIC,oBAAJ;AACA,IAAIC,kBAAJ;AACA,IAAIC,WAAW,EAAf;;AAEA;;;;;;AAMAT,MAAMU,EAAN,CAAS,cAAT,EAAyB,UAACC,YAAD,EAAeC,UAAf,EAA8B;;AAEnDN,gBAAYO,GAAZ,CAAgBF,YAAhB;;AAEAC,eAAWE,OAAX,CAAmB,UAACC,IAAD,EAAU;AACzB,YAAGR,YAAYS,GAAZ,CAAgBD,IAAhB,CAAH,EAA0B;AACtB;AACH,SAFD,MAGK,IAAIT,YAAYU,GAAZ,CAAgBD,IAAhB,CAAJ,EAA2B;AAC5BR,wBAAYM,GAAZ,CAAgBE,IAAhB;AACA;AACH;AACDb,cAAMe,IAAN,CAAWC,WAAWH,IAAX,CAAX,EAA6B,UAACI,GAAD,EAAS;AACnC,gBAAGA,GAAH,EAAQ;AACJC,wBAAQC,GAAR,CAAYF,GAAZ;AACH;AACH,SAJD;AAKH,KAbD;AAcH,CAlBD;;AAoBA;;;;AAIAnB,MAAMU,EAAN,CAAS,SAAT,EAAoB,UAACY,GAAD,EAAS;AACzBF,YAAQC,GAAR,CAAY,uBAAqBC,GAAjC;AACAd,cAAUK,GAAV,CAAcS,GAAd;AACH,CAHD;;AAKA;;;;;;AAMA,IAAMC,QAAQ,SAARA,KAAQ,CAAClB,QAAD,EAAWmB,KAAX,EAAqB;AAC/B;;;AAGAlB,kBAAc,IAAImB,GAAJ,EAAd;AACAjB,gBAAY,IAAIiB,GAAJ,EAAZ;AACAlB,kBAAc,IAAIkB,GAAJ,EAAd;;AAEAhB,eAAWe,KAAX;;AAEA;;;AAGAtB,UAAMe,IAAN,CAAWC,WAAWT,SAAS,CAAT,EAAYiB,OAAvB,CAAX,EAA4C,UAACP,GAAD,EAAS;AAClD,YAAGA,GAAH,EAAQ;AACJC,oBAAQC,GAAR,CAAYF,GAAZ;AACH;AACH,KAJD;;AAMAd,aAASC,WAAT,EAAsBC,WAAtB,EAAmCC,SAAnC;AACH,CApBD;;AAsBA;;;;;;AAMA,IAAIU,aAAa,SAAbA,UAAa,CAACI,GAAD,EAAS;;AAEtBF,YAAQC,GAAR,CAAY,kBAAZ,EAA+BC,GAA/B;;AAEA,QAAIK,OAAOlB,SAASmB,IAAT,CAAc;AAAA,eAAQD,KAAKD,OAAL,KAAiBJ,GAAzB;AAAA,KAAd,CAAX;;AAEA,QAAG,CAAC,CAACK,IAAL,EAAW;AACP3B,cAAM6B,IAAN,CAAW,cAAX,EAA2BF,KAAKD,OAAhC,EAAyCC,KAAKG,KAA9C;AACH,KAFD,MAEQ;AACJ9B,cAAM6B,IAAN,CAAW,SAAX,EAAsBP,GAAtB;AACH;AACJ,CAXD;;kBAaeC,K","file":"crawl.js","sourcesContent":["import { EventEmitter } from 'events';\nimport async from 'async';\n\nlet event = new EventEmitter();\n\n/**\n * Async queue which is a queue of processUrl tasks, concurrency is 3 (Chose a random concurrency level).\n */\nlet queue = async.queue((task, callback) => {\n    callback();\n}, 3);\n\nlet visitedUrls;\nlet skippedUrls;\nlet errorUrls;\nlet pagesObj = [];\n\n/**\n * urlProcssed event: The event decides where to put the url that is being processed and also pushes the links\n * in the queue for further processing. The event receives processedUrl and its linkedUrls and decides whether\n * the url belongs in the visitedUrls or skippedUrls list.\n */\n\nevent.on('urlProcessed', (processedUrl, linkedUrls) => {\n\n    visitedUrls.add(processedUrl);\n\n    linkedUrls.forEach((link) => {\n        if(skippedUrls.has(link)) {\n            return;\n        }\n        else if (visitedUrls.has(link)) {\n            skippedUrls.add(link);\n            return;\n        }\n        queue.push(processUrl(link), (err) => {\n           if(err) {\n               console.log(err);\n           }\n        });\n    });\n});\n\n/**\n * Error event: adds the url to errorUrls set.\n */\n\nevent.on('inError', (url) => {\n    console.log(\"processing error: \"+url);\n    errorUrls.add(url);\n});\n\n/**\n * This function received the object to be crawled and provides a callback to fetch the result.\n * @param callback\n * @param pages\n */\n\nconst crawl = (callback, pages) => {\n    /**\n     * @type {Set<any>} Initialize separate sets for success, skipped and error cases.\n     */\n    visitedUrls = new Set();\n    errorUrls = new Set();\n    skippedUrls = new Set();\n\n    pagesObj = pages;\n\n    /**\n     * Start processing with the first url of the input array.\n     */\n    queue.push(processUrl(pagesObj[0].address), (err) => {\n       if(err) {\n           console.log(err);\n       }\n    });\n\n    callback(visitedUrls, skippedUrls, errorUrls);\n};\n\n/**\n * Function to process a given url, this function accepts the \"Address\" of the url.\n * The function emits \"urlProcessed\" or \"inError\" events depending on whether there is an object in the input array for\n * the given url.\n * @param url\n */\nlet processUrl = (url) => {\n\n    console.log(\"Processing Url: \",url);\n\n    let page = pagesObj.find(page => page.address === url);\n\n    if(!!page) {\n        event.emit('urlProcessed', page.address, page.links);\n    } else  {\n        event.emit('inError', url);\n    }\n};\n\nexport default crawl;\n"]}